#!/usr/bin/env node
var ndarray = require('ndarray')
var twister = require('ostrich-twister-prng')
var ops = require('ndarray-ops')
var benchmark = require('./benchmark.json')
var fs = require('fs')
var path = require('path')

function rand(size1, size2) {
  if (size1 === 'undefined') {
    return twister.random()
  }

  if (size2 === undefined) {
    size2 = size1
  }

  var array = ndarray(new Float64Array(size1 * size2), [size1, size2])

  for (var i = 0; i < size1; ++i) {
    for (var j = 0; j < size2; ++j) {
      array.set(j, i, twister.random())
    }
  }

  return array
}

function filePathExists (path) {
  try {
    fs.accessSync(path)
    return true
  } catch (err) {}
  return false
}

for (var k in benchmark['input-size']) {
  var size = benchmark['input-size'][k]
  var inputFilePath = path.join(__dirname, 'input', size+'.csv')

  if (filePathExists(inputFilePath)) {
    console.log(inputFilePath + ' already exists, skipping')
    continue
  } else {
    console.log('Generating ' + inputFilePath)
  }

  twister.seed(1337)
  var a = rand(size,size)
  ops.mulseq(a,10000)
  ops.flooreq(a)

  for (var i = 0; i < size; i++) {
    var row = a.data.slice(i*size, i*size+size).join(',') + '\n'
    fs.appendFileSync(inputFilePath, row)
  }
}

console.log('lud benchmark ready')

